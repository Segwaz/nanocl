name: Draft Nightly Nanocl

on:
  push:
    branches:
      - "release/nightly/bin/nanocl/*"
  pull_request:
    branches:
      - "release/nightly/bin/nanocl/*"
    types: [opened, synchronize]

env:
  CARGO_TERM_COLOR: always

jobs:
  release_image:
    strategy:
      fail-fast: true
      matrix:
        target_arch: ["amd64:x86_64-unknown-linux-musl", "arm64:aarch64-unknown-linux-musl"]

    runs-on: ubuntu-latest
    container: rust:1.73.0-bullseye

    steps:
      # Checkout the repository
      - uses: actions/checkout@v3
      # Set env vars
      - name: Set env vars
        run: |
          echo "PKG_ARCH=$(echo ${{ matrix.target_arch }} | awk -F: '{print $1}')" >> $GITHUB_ENV
          echo "TARGET_ARCH=$(echo ${{ matrix.target_arch }} | awk -F: '{print $2}')" >> $GITHUB_ENV
          echo "CHANNEL=$(echo ${GITHUB_REF} | awk -F/ '{print $4}')" >> $GITHUB_ENV
          echo "NANOCL_CHANNEL=$(echo ${GITHUB_REF} | awk -F/ '{print $4}')" >> $GITHUB_ENV
          echo "BINARY_NAME=$(echo ${GITHUB_REF} | awk -F/ '{print $6}')" >> $GITHUB_ENV
          echo "VERSION=$(echo ${GITHUB_REF} | awk -F/ '{print $7}')" >> $GITHUB_ENV
      # Debug env vars
      - name: Debug env vars
        run: |
          echo $BRANCH_NAME
          echo $BINARY_NAME
          echo $CHANNEL
          echo $VERSION
          echo $PKG_ARCH
          echo $TARGET_ARCH
      # Install rust
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: llvm-tools-preview
      # Install required dependencies
      - name: Install dependencies
        run: |
          apt-get update -y
          dpkg --add-architecture $PKG_ARCH
          apt-get update -y
          apt-get install -y pkg-config:$PKG_ARCH gcc:$PKG_ARCH musl-dev:$PKG_ARCH libpq-dev:$PKG_ARCH libssl-dev:$PKG_ARCH musl-tools:$PKG_ARCH libc-dev:$PKG_ARCH g++:$PKG_ARCH make:$PKG_ARCH
          rustup target add $TARGET_ARCH
      # Fix git permission
      - name: Fix git permission
        run: |
          git config --global --add safe.directory /__w/nanocl/nanocl
      # Package nanocl
      - name: Package
        env:
          PKG_TARGET_ARCH: ${{ matrix.target_arch }}
        run: ./scripts/release_nanocl.sh
      - name: Test if release already exists
        id: release-exists
        continue-on-error: true
        run: gh release view $BINARY_NAME-$VERSION-$CHANNEL
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
      - name: Create new draft release
        if: steps.release-exists.outcome == 'failure' && steps.release-exists.conclusion == 'success'
        run: gh release create -d $BINARY_NAME-$VERSION-$CHANNEL -t $BINARY_NAME-$VERSION-$CHANNEL -F ./bin/$BINARY_NAME/changelog.md target/debian/${BINARY_NAME}_${VERSION}_${PKG_ARCH}.deb#nanocl_${PKG_ARCH}.deb target/linux/${BINARY_NAME}_${VERSION}_${PKG_ARCH}.tar.gz#nanocl_${PKG_ARCH}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
      - name: Update draft release
        if: steps.release-exists.outcome == 'success' && steps.release-exists.conclusion == 'success'
        run: |
          gh release delete-asset -y $BINARY_NAME-$VERSION-$CHANNEL ${BINARY_NAME}_${VERSION}_${PKG_ARCH}.deb ${BINARY_NAME}_${VERSION}_${PKG_ARCH}.tar.gz || true
          gh release upload $BINARY_NAME-$VERSION-$CHANNEL target/debian/${BINARY_NAME}_${VERSION}_${PKG_ARCH}.deb#nanocl_${PKG_ARCH}.deb target/linux/${BINARY_NAME}_${VERSION}_${PKG_ARCH}.tar.gz#nanocl_${PKG_ARCH}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
