name: Draft Nightly Nanocl

on:
  push:
    branches:
      - "release/nightly/bin/nanocl/*"
  pull_request:
    branches:
      - "release/nightly/bin/nanocl/*"
    types: [opened, synchronize]

env:
  CARGO_TERM_COLOR: always

jobs:
  release_nanocl_bin_linux:
    runs-on: ubuntu-latest
    container: rust:1.82.0-alpine3.20

    steps:
      # Install required dependencies
      - name: Install dependencies
        run: |
          apk add --update alpine-sdk musl-dev g++ make libpq-dev openssl-dev git perl build-base dpkg pandoc github-cli
          rustup target add x86_64-unknown-linux-musl
      - uses: actions/checkout@v4
      # Extract branch info
      - name: Set info
        run: |
          echo "CHANNEL=$(echo ${GITHUB_REF} | awk -F/ '{print $4}')" >> $GITHUB_ENV
          echo "NANOCL_CHANNEL=$(echo ${GITHUB_REF} | awk -F/ '{print $4}')" >> $GITHUB_ENV
          echo "BINARY_NAME=$(echo ${GITHUB_REF} | awk -F/ '{print $6}')" >> $GITHUB_ENV
          echo "VERSION=$(echo ${GITHUB_REF} | awk -F/ '{print $7}')" >> $GITHUB_ENV
      # Print info for debug
      - name: Fix git permission
        run: |
          git config --global --add safe.directory /__w/nanocl/nanocl
      - name: Print Info
        run: |
          echo $BRANCH_NAME
          echo $BINARY_NAME
          echo $CHANNEL
          echo $VERSION
      # Package nanocl into a .deb
      - name: Package
        run: |
          export RUSTFLAGS="-C target-feature=+crt-static"
          ./scripts/release_nanocl.sh
      - name: Test if release already exists
        id: release-exists
        continue-on-error: true
        run: gh release view $BINARY_NAME-$VERSION-$CHANNEL
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
      - name: Create new draft release
        if: steps.release-exists.outcome == 'failure' && steps.release-exists.conclusion == 'success'
        run: |
          gh release create -d \
            $BINARY_NAME-$VERSION-$CHANNEL \
            -t $BINARY_NAME-$VERSION-$CHANNEL \
            -F ./bin/$BINARY_NAME/changelog.md \
            target/debian/${BINARY_NAME}_${VERSION}_amd64.deb#nanocl_amd64.deb \
            target/linux/${BINARY_NAME}_${VERSION}_amd64.tar.gz#nanocl_amd64.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
      - name: Update draft release
        if: steps.release-exists.outcome == 'success' && steps.release-exists.conclusion == 'success'
        run: |
          gh release delete-asset -y \
            $BINARY_NAME-$VERSION-$CHANNEL \
            ${BINARY_NAME}_${VERSION}_amd64.deb || true
          gh release delete-asset -y \
            $BINARY_NAME-$VERSION-$CHANNEL \
            ${BINARY_NAME}_${VERSION}_amd64.tar.gz || true
          gh release upload \
            $BINARY_NAME-$VERSION-$CHANNEL \
            target/debian/${BINARY_NAME}_${VERSION}_amd64.deb#nanocl_amd64.deb
          gh release upload \
            $BINARY_NAME-$VERSION-$CHANNEL \
            target/linux/${BINARY_NAME}_${VERSION}_amd64.tar.gz#nanocl_amd64.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}

  release_nanocl_bin_macos:
    runs-on: macOS-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.82.0-aarch64-apple-darwin
      - name: Set info
        run: |
          echo "CHANNEL=$(echo ${GITHUB_REF} | awk -F/ '{print $4}')" >> $GITHUB_ENV
          echo "NANOCL_CHANNEL=$(echo ${GITHUB_REF} | awk -F/ '{print $4}')" >> $GITHUB_ENV
          echo "BINARY_NAME=$(echo ${GITHUB_REF} | awk -F/ '{print $6}')" >> $GITHUB_ENV
          echo "VERSION=$(echo ${GITHUB_REF} | awk -F/ '{print $7}')" >> $GITHUB_ENV
      - name: Print Info
        run: |
          echo $BRANCH_NAME
          echo $BINARY_NAME
          echo $CHANNEL
          echo $VERSION
      - name: Install dependencies
        run: |
          brew install openssl
          brew link --force openssl
          brew install libpq
          brew link --force libpq
      - name: Package
        run: |
          export RUSTFLAGS="-C target-feature=+crt-static -L /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib"
          export PQ_LIB_DIR="$(brew --prefix libpq)/lib"
          cargo build --release --target aarch64-apple-darwin --bin $BINARY_NAME
          mkdir -p target/macos
          mkdir -p target/macos/bin
          mkdir -p target/macos/share
          # Generate man pages
          for file in ./bin/nanocl/target/man/*; do
            file_name=$(basename "${file}")
            gzip <"$file" > target/macos/share/man/man1/"$file_name".gz
          done
          cp target/aarch64-apple-darwin/release/$BINARY_NAME target/macos/bin/$BINARY_NAME
          tar -czf target/macos/${BINARY_NAME}_${VERSION}_aarch64.tar.gz -C target/macos $BINARY_NAME
      - name: Test if release already exists
        id: release-exists
        continue-on-error: true
        run: gh release view $BINARY_NAME-$VERSION-$CHANNEL
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
      - name: Create new draft release
        if: steps.release-exists.outcome == 'failure' && steps.release-exists.conclusion == 'success'
        run: |
          gh release create -d \
            $BINARY_NAME-$VERSION-$CHANNEL \
            -t $BINARY_NAME-$VERSION-$CHANNEL \
            -F ./bin/$BINARY_NAME/changelog.md \
            target/macos/${BINARY_NAME}_${VERSION}_aarch64.tar.gz#nanocl_aarch64.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
      - name: Update draft release
        if: steps.release-exists.outcome == 'success' && steps.release-exists.conclusion == 'success'
        run: |
          gh release delete-asset -y \
            $BINARY_NAME-$VERSION-$CHANNEL \
            ${BINARY_NAME}_${VERSION}_aarch64.tar.gz || true
          gh release upload \
            $BINARY_NAME-$VERSION-$CHANNEL \
            target/macos/${BINARY_NAME}_${VERSION}_aarch64.tar.gz#nanocl_aarch64.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
