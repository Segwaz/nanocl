name: Draft Nanocl Binary

on:
  push:
    branches:
      - "release-nightly-nanocl-*"
      - "release-stable-nanocl-*"
  pull_request:
    branches:
      - "release-nightly-nanocl-*"
      - "release-stable-nanocl-*"
    types: [opened, synchronize, closed]

env:
  CARGO_TERM_COLOR: always

jobs:
  release_image:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      # Install rust
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      # Extract branch info
      - name: Set info
        run: |
          echo "BRANCH_NAME=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV
          echo "CHANNEL=$(echo ${GITHUB_REF##*/} | awk -F- '{print $2}')" >> $GITHUB_ENV
          echo "NANOCL_CHANNEL=$(echo ${GITHUB_REF##*/} | awk -F- '{print $2}')" >> $GITHUB_ENV
          echo "BINARY_NAME=$(echo ${GITHUB_REF##*/} | awk -F- '{print $3}')" >> $GITHUB_ENV
          echo "VERSION=$(echo ${GITHUB_REF##*/} | awk -F- '{print $4}')" >> $GITHUB_ENV
      # Print info for debug
      - name: Print Info
        run: |
          echo $BRANCH_NAME
          echo $BINARY_NAME
          echo $CHANNEL
          echo $VERSION
      # Install dependencies
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y pandoc dpkg build-essential
      # Create binary
      - name: Create Binary
        run: ./scripts/release_nanocl.sh
      # Upload it to release
      - name: Test if release already exists
        id: release-exists
        continue-on-error: true
        run: gh release view $BINARY_NAME-$CHANNEL-$VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
      - name: Create new draft release
        if: steps.release-exists.outcome == 'failure' && steps.release-exists.conclusion == 'success'
        run: gh release create -t $BINARY_NAME-$CHANNEL-$VERSION -d $BINARY_NAME-$CHANNEL-$VERSION -F ./bin/$BINARY_NAME/changelog.md ./target/debian/nanocl_$VERSION_amd64.deb#$BINARY_NAME.deb ./target/x86_64-unknown-linux-musl/release/$BINARY_NAME#BINARY_NAME;
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
      - name: Update draft release
        if: steps.release-exists.outcome == 'success' && steps.release-exists.conclusion == 'success'
        run: |
          gh release delete-asset -y $BINARY_NAME-$CHANNEL-$VERSION $BINARY_NAME-$CHANNEL-$VERSION.tar.gz
          gh release upload $BINARY_NAME-$CHANNEL-$VERSION /tmp/$BINARY_NAME-$CHANNEL-$VERSION.tar.gz#$BINARY_NAME-image;
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
